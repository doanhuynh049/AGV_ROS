ARM GAS  /tmp/ccf690pb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB130:
  28              		.file 1 "Core/Src/stm32f4xx_it.c"
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f4xx_it.c ****   *
  16:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f4xx_it.c ****   */
  18:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f4xx_it.c **** 
  20:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f4xx_it.c **** #include "main.h"
  22:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  23:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f4xx_it.c **** 
  27:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f4xx_it.c **** 
  30:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccf690pb.s 			page 2


  31:Core/Src/stm32f4xx_it.c **** 
  32:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f4xx_it.c **** 
  35:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f4xx_it.c **** 
  37:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f4xx_it.c **** 
  40:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f4xx_it.c **** 
  42:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f4xx_it.c **** 
  45:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32f4xx_it.c **** 
  47:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32f4xx_it.c **** 
  50:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32f4xx_it.c **** 
  52:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32f4xx_it.c **** 
  55:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32f4xx_it.c **** 
  57:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim1;
  59:Core/Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_rx;
  60:Core/Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_tx;
  61:Core/Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart6;
  62:Core/Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim9;
  63:Core/Src/stm32f4xx_it.c **** 
  64:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32f4xx_it.c **** 
  66:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  67:Core/Src/stm32f4xx_it.c **** 
  68:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  70:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32f4xx_it.c **** /**
  72:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  73:Core/Src/stm32f4xx_it.c ****   */
  74:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  75:Core/Src/stm32f4xx_it.c **** {
  29              		.loc 1 75 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  76:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32f4xx_it.c **** 
  78:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32f4xx_it.c ****   while (1)
ARM GAS  /tmp/ccf690pb.s 			page 3


  36              		.loc 1 80 3 discriminator 1 view .LVU1
  81:Core/Src/stm32f4xx_it.c ****   {
  82:Core/Src/stm32f4xx_it.c ****   }
  37              		.loc 1 82 3 discriminator 1 view .LVU2
  80:Core/Src/stm32f4xx_it.c ****   {
  38              		.loc 1 80 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE130:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB131:
  83:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32f4xx_it.c **** }
  85:Core/Src/stm32f4xx_it.c **** 
  86:Core/Src/stm32f4xx_it.c **** /**
  87:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32f4xx_it.c ****   */
  89:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  90:Core/Src/stm32f4xx_it.c **** {
  52              		.loc 1 90 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  91:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32f4xx_it.c **** 
  93:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32f4xx_it.c ****   while (1)
  59              		.loc 1 94 3 discriminator 1 view .LVU5
  95:Core/Src/stm32f4xx_it.c ****   {
  96:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32f4xx_it.c ****   }
  60              		.loc 1 98 3 discriminator 1 view .LVU6
  94:Core/Src/stm32f4xx_it.c ****   {
  61              		.loc 1 94 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE131:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB132:
  99:Core/Src/stm32f4xx_it.c **** }
 100:Core/Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccf690pb.s 			page 4


 101:Core/Src/stm32f4xx_it.c **** /**
 102:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 103:Core/Src/stm32f4xx_it.c ****   */
 104:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 105:Core/Src/stm32f4xx_it.c **** {
  75              		.loc 1 105 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 106:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f4xx_it.c **** 
 108:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f4xx_it.c ****   while (1)
  82              		.loc 1 109 3 discriminator 1 view .LVU9
 110:Core/Src/stm32f4xx_it.c ****   {
 111:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32f4xx_it.c ****   }
  83              		.loc 1 113 3 discriminator 1 view .LVU10
 109:Core/Src/stm32f4xx_it.c ****   {
  84              		.loc 1 109 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE132:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB133:
 114:Core/Src/stm32f4xx_it.c **** }
 115:Core/Src/stm32f4xx_it.c **** 
 116:Core/Src/stm32f4xx_it.c **** /**
 117:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 118:Core/Src/stm32f4xx_it.c ****   */
 119:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 120:Core/Src/stm32f4xx_it.c **** {
  98              		.loc 1 120 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 121:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 122:Core/Src/stm32f4xx_it.c **** 
 123:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 124:Core/Src/stm32f4xx_it.c ****   while (1)
 105              		.loc 1 124 3 discriminator 1 view .LVU13
 125:Core/Src/stm32f4xx_it.c ****   {
 126:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccf690pb.s 			page 5


 128:Core/Src/stm32f4xx_it.c ****   }
 106              		.loc 1 128 3 discriminator 1 view .LVU14
 124:Core/Src/stm32f4xx_it.c ****   {
 107              		.loc 1 124 9 discriminator 1 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE133:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB134:
 129:Core/Src/stm32f4xx_it.c **** }
 130:Core/Src/stm32f4xx_it.c **** 
 131:Core/Src/stm32f4xx_it.c **** /**
 132:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 133:Core/Src/stm32f4xx_it.c ****   */
 134:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 135:Core/Src/stm32f4xx_it.c **** {
 121              		.loc 1 135 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 136:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 137:Core/Src/stm32f4xx_it.c **** 
 138:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 139:Core/Src/stm32f4xx_it.c ****   while (1)
 128              		.loc 1 139 3 discriminator 1 view .LVU17
 140:Core/Src/stm32f4xx_it.c ****   {
 141:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32f4xx_it.c ****   }
 129              		.loc 1 143 3 discriminator 1 view .LVU18
 139:Core/Src/stm32f4xx_it.c ****   {
 130              		.loc 1 139 9 discriminator 1 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE134:
 135              		.section	.text.DebugMon_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	DebugMon_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	DebugMon_Handler:
 143              	.LFB135:
 144:Core/Src/stm32f4xx_it.c **** }
 145:Core/Src/stm32f4xx_it.c **** 
 146:Core/Src/stm32f4xx_it.c **** /**
 147:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 148:Core/Src/stm32f4xx_it.c ****   */
ARM GAS  /tmp/ccf690pb.s 			page 6


 149:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 150:Core/Src/stm32f4xx_it.c **** {
 144              		.loc 1 150 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 151:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 152:Core/Src/stm32f4xx_it.c **** 
 153:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 154:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 155:Core/Src/stm32f4xx_it.c **** 
 156:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 157:Core/Src/stm32f4xx_it.c **** }
 149              		.loc 1 157 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE135:
 154              		.section	.text.TIM1_BRK_TIM9_IRQHandler,"ax",%progbits
 155              		.align	1
 156              		.global	TIM1_BRK_TIM9_IRQHandler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	TIM1_BRK_TIM9_IRQHandler:
 162              	.LFB136:
 158:Core/Src/stm32f4xx_it.c **** 
 159:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 160:Core/Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 161:Core/Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 162:Core/Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 163:Core/Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 164:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 165:Core/Src/stm32f4xx_it.c **** 
 166:Core/Src/stm32f4xx_it.c **** /**
 167:Core/Src/stm32f4xx_it.c ****   * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 168:Core/Src/stm32f4xx_it.c ****   */
 169:Core/Src/stm32f4xx_it.c **** void TIM1_BRK_TIM9_IRQHandler(void)
 170:Core/Src/stm32f4xx_it.c **** {
 163              		.loc 1 170 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 08B5     		push	{r3, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 3, -8
 171              		.cfi_offset 14, -4
 171:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
 172:Core/Src/stm32f4xx_it.c **** 
 173:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
 174:Core/Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 172              		.loc 1 174 3 view .LVU23
 173 0002 0348     		ldr	r0, .L14
 174 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 175              	.LVL0:
 175:Core/Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim9);
ARM GAS  /tmp/ccf690pb.s 			page 7


 176              		.loc 1 175 3 view .LVU24
 177 0008 0248     		ldr	r0, .L14+4
 178 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 179              	.LVL1:
 176:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
 177:Core/Src/stm32f4xx_it.c **** 
 178:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
 179:Core/Src/stm32f4xx_it.c **** }
 180              		.loc 1 179 1 is_stmt 0 view .LVU25
 181 000e 08BD     		pop	{r3, pc}
 182              	.L15:
 183              		.align	2
 184              	.L14:
 185 0010 00000000 		.word	htim1
 186 0014 00000000 		.word	htim9
 187              		.cfi_endproc
 188              	.LFE136:
 190              		.section	.text.DMA2_Stream1_IRQHandler,"ax",%progbits
 191              		.align	1
 192              		.global	DMA2_Stream1_IRQHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	DMA2_Stream1_IRQHandler:
 198              	.LFB137:
 180:Core/Src/stm32f4xx_it.c **** 
 181:Core/Src/stm32f4xx_it.c **** /**
 182:Core/Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream1 global interrupt.
 183:Core/Src/stm32f4xx_it.c ****   */
 184:Core/Src/stm32f4xx_it.c **** void DMA2_Stream1_IRQHandler(void)
 185:Core/Src/stm32f4xx_it.c **** {
 199              		.loc 1 185 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI1:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 186:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
 187:Core/Src/stm32f4xx_it.c **** 
 188:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 0 */
 189:Core/Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_rx);
 208              		.loc 1 189 3 view .LVU27
 209 0002 0248     		ldr	r0, .L18
 210 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 211              	.LVL2:
 190:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
 191:Core/Src/stm32f4xx_it.c **** 
 192:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 1 */
 193:Core/Src/stm32f4xx_it.c **** }
 212              		.loc 1 193 1 is_stmt 0 view .LVU28
 213 0008 08BD     		pop	{r3, pc}
 214              	.L19:
 215 000a 00BF     		.align	2
 216              	.L18:
ARM GAS  /tmp/ccf690pb.s 			page 8


 217 000c 00000000 		.word	hdma_usart6_rx
 218              		.cfi_endproc
 219              	.LFE137:
 221              		.section	.text.DMA2_Stream6_IRQHandler,"ax",%progbits
 222              		.align	1
 223              		.global	DMA2_Stream6_IRQHandler
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	DMA2_Stream6_IRQHandler:
 229              	.LFB138:
 194:Core/Src/stm32f4xx_it.c **** 
 195:Core/Src/stm32f4xx_it.c **** /**
 196:Core/Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream6 global interrupt.
 197:Core/Src/stm32f4xx_it.c ****   */
 198:Core/Src/stm32f4xx_it.c **** void DMA2_Stream6_IRQHandler(void)
 199:Core/Src/stm32f4xx_it.c **** {
 230              		.loc 1 199 1 is_stmt 1 view -0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI2:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 200:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
 201:Core/Src/stm32f4xx_it.c **** 
 202:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 0 */
 203:Core/Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_tx);
 239              		.loc 1 203 3 view .LVU30
 240 0002 0248     		ldr	r0, .L22
 241 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 242              	.LVL3:
 204:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
 205:Core/Src/stm32f4xx_it.c **** 
 206:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 1 */
 207:Core/Src/stm32f4xx_it.c **** }
 243              		.loc 1 207 1 is_stmt 0 view .LVU31
 244 0008 08BD     		pop	{r3, pc}
 245              	.L23:
 246 000a 00BF     		.align	2
 247              	.L22:
 248 000c 00000000 		.word	hdma_usart6_tx
 249              		.cfi_endproc
 250              	.LFE138:
 252              		.section	.text.USART6_IRQHandler,"ax",%progbits
 253              		.align	1
 254              		.global	USART6_IRQHandler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	USART6_IRQHandler:
 260              	.LFB139:
 208:Core/Src/stm32f4xx_it.c **** 
 209:Core/Src/stm32f4xx_it.c **** /**
 210:Core/Src/stm32f4xx_it.c ****   * @brief This function handles USART6 global interrupt.
ARM GAS  /tmp/ccf690pb.s 			page 9


 211:Core/Src/stm32f4xx_it.c ****   */
 212:Core/Src/stm32f4xx_it.c **** void USART6_IRQHandler(void)
 213:Core/Src/stm32f4xx_it.c **** {
 261              		.loc 1 213 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI3:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 214:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART6_IRQn 0 */
 215:Core/Src/stm32f4xx_it.c **** 
 216:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART6_IRQn 0 */
 217:Core/Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart6);
 270              		.loc 1 217 3 view .LVU33
 271 0002 0248     		ldr	r0, .L26
 272 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 273              	.LVL4:
 218:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART6_IRQn 1 */
 219:Core/Src/stm32f4xx_it.c **** 
 220:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART6_IRQn 1 */
 221:Core/Src/stm32f4xx_it.c **** }
 274              		.loc 1 221 1 is_stmt 0 view .LVU34
 275 0008 08BD     		pop	{r3, pc}
 276              	.L27:
 277 000a 00BF     		.align	2
 278              	.L26:
 279 000c 00000000 		.word	huart6
 280              		.cfi_endproc
 281              	.LFE139:
 283              		.text
 284              	.Letext0:
 285              		.file 2 "/opt/st/stm32cubeide_1.12.0/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 286              		.file 3 "/opt/st/stm32cubeide_1.12.0/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 287              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 288              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 289              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 290              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 291              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/ccf690pb.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccf690pb.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccf690pb.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccf690pb.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccf690pb.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:96     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccf690pb.s:113    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccf690pb.s:136    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccf690pb.s:142    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccf690pb.s:155    .text.TIM1_BRK_TIM9_IRQHandler:0000000000000000 $t
     /tmp/ccf690pb.s:161    .text.TIM1_BRK_TIM9_IRQHandler:0000000000000000 TIM1_BRK_TIM9_IRQHandler
     /tmp/ccf690pb.s:185    .text.TIM1_BRK_TIM9_IRQHandler:0000000000000010 $d
     /tmp/ccf690pb.s:191    .text.DMA2_Stream1_IRQHandler:0000000000000000 $t
     /tmp/ccf690pb.s:197    .text.DMA2_Stream1_IRQHandler:0000000000000000 DMA2_Stream1_IRQHandler
     /tmp/ccf690pb.s:217    .text.DMA2_Stream1_IRQHandler:000000000000000c $d
     /tmp/ccf690pb.s:222    .text.DMA2_Stream6_IRQHandler:0000000000000000 $t
     /tmp/ccf690pb.s:228    .text.DMA2_Stream6_IRQHandler:0000000000000000 DMA2_Stream6_IRQHandler
     /tmp/ccf690pb.s:248    .text.DMA2_Stream6_IRQHandler:000000000000000c $d
     /tmp/ccf690pb.s:253    .text.USART6_IRQHandler:0000000000000000 $t
     /tmp/ccf690pb.s:259    .text.USART6_IRQHandler:0000000000000000 USART6_IRQHandler
     /tmp/ccf690pb.s:279    .text.USART6_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_TIM_IRQHandler
htim1
htim9
HAL_DMA_IRQHandler
hdma_usart6_rx
hdma_usart6_tx
HAL_UART_IRQHandler
huart6
